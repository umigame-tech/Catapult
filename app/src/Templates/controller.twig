<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Http\Requests\{{ requestName }};
{% if loginRequestName is not empty %}
use App\Http\Requests\{{ loginRequestName }};
{% endif %}
use App\Models\{{ modelName }};

class {{ controllerName }} extends Controller
{
    private $routePrefix = '';

    public function __construct()
    {
        $this->middleware(function (Request $request, \Closure $next) {
            $authList = array_keys(config('auth.guards'));
            foreach ($authList as $authName) {
                if (auth()->guard($authName)->check()) {
                    $this->routePrefix = $authName . '.';
                    break;
                }
            }

            return $next($request);
        });

    }

    private function buildFromUrl(Request $request)
    {
        $currentUrl = [$request->path()];
        $currentGetParams = $request->server('QUERY_STRING');
        if (!empty($currentGetParams)) {
            $currentUrl[] = $currentGetParams;
        }
        return '/' . implode('?', $currentUrl);
    }

    public function index(Request $request, {{ modelName }} ${{ entity['name'] }})
    {
        $request->session()->forget('{{ entity['name'] }}');
        $fromUrl = $this->buildFromUrl($request);
        return view('{{ entity['name'] }}.index', [
            '{{ plural }}' => ${{ entity['name'] }}->paginate(10),
            'fromUrl' => $fromUrl,
            'routePrefix' => $this->routePrefix,
        ]);
    }

    public function show(Request $request, {{ modelName }} ${{ entity['name'] }}, $id)
    {
        $request->session()->forget('{{ entity['name'] }}');
        $backUrl = $request->input('fromUrl', route($this->routePrefix . '{{ entity['name'] }}.index'));
        $fromUrl = $this->buildFromUrl($request);
        return view('{{ entity['name'] }}.show', [
            '{{ entity['name'] }}' => ${{ entity['name'] }}->findOrFail($id),
            'backUrl' => $backUrl,
            'fromUrl' => $fromUrl,
            'routePrefix' => $this->routePrefix,
        ]);
    }

    public function new({{ requestName }} $request, {{ modelName }} ${{ entity['name'] }})
    {
        // Cancelで戻ってきた場合にセッションから値を取得する処理
        ${{ entity['name'] }}->fill($request->session()->get('{{ entity['name'] }}.form', []));

        $backUrl = $request->input('fromUrl', route($this->routePrefix . '{{ entity['name'] }}.index'));
        $fromUrl = $this->buildFromUrl($request);
        $submitUrl = route($this->routePrefix . '{{ entity['name'] }}.createConfirm', [
            'fromUrl' => $fromUrl,
        ]);

        return view('{{ entity['name'] }}.new', [
            '{{ entity['name'] }}' => ${{ entity['name'] }},
            'backUrl' => $backUrl,
            'submitUrl' => $submitUrl,
        ]);
    }

    public function createConfirm({{ requestName }} $request, {{ modelName }} ${{ entity['name'] }})
    {
        ${{ entity['name'] }}->fill($request->all());
        $request->session()->put('{{ entity['name'] }}.form', ${{ entity['name'] }}->toArray());

        $backUrl = $request->input('fromUrl', route($this->routePrefix . '{{ entity['name'] }}.index'));
        return view('{{ entity['name'] }}.createConfirm', [
            '{{ entity['name'] }}' => ${{ entity['name'] }},
            'backUrl' => $backUrl,
            'routePrefix' => $this->routePrefix,
        ]);
    }

    public function create(Request $request, {{ modelName }} ${{ entity['name'] }})
    {
        ${{ entity['name'] }}->fill($request->session()->get('{{ entity['name'] }}.form', []));
        ${{ entity['name'] }}->save();
        $request->session()->forget('{{ entity['name'] }}.form');

        return redirect()
            ->route($this->routePrefix . '{{ entity['name'] }}.index')
            ->with('message', "Succeeded to create the {{ entity['name'] }}");
    }

    public function edit({{ requestName }} $request, {{ modelName }} ${{ entity['name'] }}, $id)
    {
        ${{ entity['name'] }} = ${{ entity['name'] }}->findOrFail($id);
{% if authenticatable %}
        unset(${{ entity['name'] }}->{{ password }});
{% endif %}
        $backUrl = $request->input('fromUrl', route($this->routePrefix . '{{ entity['name'] }}.index'));
        $fromUrl = $this->buildFromUrl($request);
        $submitUrl = route($this->routePrefix . '{{ entity['name'] }}.updateConfirm', [
            'id' => $id,
            'fromUrl' => $fromUrl,
        ]);

        // Cancelで戻ってきた場合にセッションから値を取得する処理
        $session = $request->session()->get('{{ entity['name'] }}.form', []);
        if (!empty($session) && $session['id'] === ${{ entity['name'] }}->id) {
            ${{ entity['name'] }}->fill($session);
        }

        return view('{{ entity['name'] }}.edit', [
            '{{ entity['name'] }}' => ${{ entity['name'] }},
            'backUrl' => $backUrl,
            'submitUrl' => $submitUrl,
        ]);
    }

    public function updateConfirm({{ requestName }} $request, {{ modelName }} ${{ entity['name'] }}, $id)
    {
        $backUrl = $request->input('fromUrl', route($this->routePrefix . '{{ entity['name'] }}.index'));
        ${{ entity['name'] }} = ${{ entity['name'] }}->findOrFail($id);
        ${{ entity['name'] }}->fill($request->all());
        $request->session()->put('{{ entity['name'] }}.form', ${{ entity['name'] }}->toArray());

        return view('{{ entity['name'] }}.updateConfirm', [
            '{{ entity['name'] }}' => ${{ entity['name'] }},
            'backUrl' => $backUrl,
            'routePrefix' => $this->routePrefix,
        ]);
    }

    public function update({{ requestName }} $request, {{ modelName }} ${{ entity['name'] }}, $id)
    {
        $session = $request->session()->get('{{ entity['name'] }}.form', []);
        if ($session['id'] != $id) {
            abort(400, 'セッションのIDとリクエストのIDが一致しません。');
        }

        ${{ entity['name'] }} = ${{ entity['name'] }}->findOrFail($id);
        ${{ entity['name'] }}->fill($session);
        ${{ entity['name'] }}->save();
        $request->session()->forget('{{ entity['name'] }}.form');

        return redirect()
            ->route($this->routePrefix . '{{ entity['name'] }}.index')
            ->with('message', "Succeeded to update the {{ entity['name'] }}");
    }

    public function destroyConfirm(Request $request, {{ modelName }} ${{ entity['name'] }}, $id)
    {
        ${{ entity['name'] }} = ${{ entity['name'] }}->findOrFail($id);
        $backUrl = $request->input('fromUrl', route($this->routePrefix . '{{ entity['name'] }}.index'));
        $request->session()->put('{{ entity['name'] }}.destroy_id', $id);

        return view('{{ entity['name'] }}.destroyConfirm', [
            '{{ entity['name'] }}' => ${{ entity['name'] }},
            'backUrl' => $backUrl,
            'routePrefix' => $this->routePrefix,
        ]);
    }

    public function destroy(Request $request, {{ modelName }} ${{ entity['name']}}, $id)
    {
        $session = $request->session()->get('{{ entity['name'] }}.destroy_id', null);
        if ($session != $id) {
            abort(400, 'セッションのIDとリクエストのIDが一致しません。');
        }
        $request->session()->forget('{{ entity['name'] }}.destroy_id');

        ${{ entity['name'] }} = ${{ entity['name'] }}->findOrFail($id);
        ${{ entity['name'] }}->delete();

        return redirect()
            ->route($this->routePrefix . '{{ entity['name'] }}.index')
            ->with('message', "Succeeded to delete the {{ entity['name'] }}");
    }
{% if authenticatable and loginRequestName is not empty %}
    public function login(Request $request)
    {
        $submitUrl = route($this->routePrefix . '{{ plural }}.loginSubmit');

        return view('{{ entity['name'] }}.login', [
            'submitUrl' => $submitUrl,
        ]);
    }

    // TODO: ログイン用のRequestクラスの自動生成
    public function loginSubmit({{ loginRequestName }} $request)
    {
        // TODO: ログイン処理の実装
        $credentials = $request->only('{{ loginKeys|join("', '") }}', '{{ password }}');

        if (auth('{{ authName }}')->attempt($credentials)) {
            $request->session()->regenerate();
            return redirect()->intended('/');
        }

        return back()->withErrors([
{% for key in loginKeys %}
            '{{ key }}' => 'The provided credentials do not match our records.',
{% endfor %}
        ])->onlyInput('{{ loginKeys|join("', '") }}');
    }

    public function logout(Request $request)
    {
        // TODO: ログアウト処理
        return [];
    }
{% endif %}
}
